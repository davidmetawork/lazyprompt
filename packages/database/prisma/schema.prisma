// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Models for the LazyPrompt marketplace

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  prompts       Prompt[]
  purchases     Purchase[]
  votes         Vote[]
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Prompt {
  id          String     @id @default(cuid())
  title       String
  description String
  content     String
  model       String     // AI model (e.g., "gpt-4", "claude", "stable-diffusion")
  price       Float      @default(0)
  published   Boolean    @default(true)
  upvoteCount Int        @default(0)
  userId      String
  categoryId  String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  category    Category   @relation(fields: [categoryId], references: [id])
  purchases   Purchase[]
  votes       Vote[]
}

model Category {
  id      String   @id @default(cuid())
  name    String   @unique
  prompts Prompt[]
}

model Purchase {
  id        String   @id @default(cuid())
  userId    String
  promptId  String
  price     Float
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  prompt    Prompt   @relation(fields: [promptId], references: [id], onDelete: Cascade)

  @@unique([userId, promptId])
}

model Vote {
  id       String @id @default(cuid())
  userId   String
  promptId String
  value    Int    @default(1) // 1 for upvote, -1 for downvote
  createdAt DateTime @default(now())
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  prompt   Prompt @relation(fields: [promptId], references: [id], onDelete: Cascade)

  @@unique([userId, promptId]) // One vote per user per prompt
} 